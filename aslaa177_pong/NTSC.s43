;NTSC Video Signal code
;Interupt handler for CCR0
  
NAME ta0Int  
  
#include <msp430x11x1.h>

EXTERN line           ;Variables defined in C passed to assembly 
EXTERN state          ;Variables defined in C passed to assembly 
EXTERN freq           ;Variables defined in C passed to assembly 
EXTERN play           ;Variables defined in C passed to assembly 
EXTERN sde            ;Variables defined in C passed to assembly 
EXTERN videomem       ;Variables defined in C passed to assembly 

;minimal delay function give time in R4 4 cycles per count == 0.5us

  PUBLIC  ta0Int           ;C code will notice this as the TimerA0 interupt starting pt
  RSEG    CODE

;delay function to creat sync pulses
hold:
        nop                   ;1
        dec   R4              ;1
        jnz   hold            ;2
        ret


;Interrupt handler for timer (Timer_A0)
;Generates the equalization and vertical pulses of the NTSC standard (525 lines)
;525 Lines total = Lines generated by jump table 
;LA, LB, etc lines + Blank Lines + Lines = 525

ta0Int:
        add    state, R0
        ;Generate NTSC pulse even frame
        jmp    L_A   ;521
        jmp    L_A   ;522

        jmp    L_B   ;523
        jmp    L_B   ;524
        jmp    L_B   ;525
        
        jmp    L_C   ;1
        jmp    L_C   ;2
        jmp    L_C   ;3
        
        jmp    L_D   ;  z formation
        
        jmp    L_B   ;4
        jmp    L_B   ;5
        jmp    L_B   ;6

        jmp    L_A   ;7
        jmp    L_A   ;8
        jmp    L_A   ;9
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        
        ;Time between even and odd frames
        jmp    BLANKLINES
        jmp    LINES
        jmp    BLANKLINES
        ;Total lines should equal 263 at this point
        
        ;Generate NTSC pulse odd frame
        jmp    L_A   ;259
        jmp    L_G   ;260 half period of L_A

        jmp    L_B   
                  ;261     
        jmp    L_B   
                  ;262
        jmp    L_B   
                  ;263
        jmp    L_C   
                  ;264
        jmp    L_C   
                  ;265
        jmp    L_C   
                  ;266
        jmp    L_D   ;  z formation
        
        jmp    L_B   
                  ;267
        jmp    L_B   
                  ;268
        jmp    L_F;
         
        jmp    L_A 
        jmp    L_A 
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        jmp    L_A
        
        ;Time between even and odd frames 
        jmp    BLANKLINES
        jmp    LINES
        jmp    BLANKLINES
        ;Total lines should equal 262 at this point
        ;Add both sections and get 512 total
        
        clr    state	;reset state and go into L_A
        

L_A:
        ;prepulse long high
        ;sync
        bic    #OUT, &CCTL0
        bic.b  #BIT0, &P1OUT
        mov    #4, R4
        call   #hold
        ;long high
        bis    #OUT, &CCTL0       
        mov    #100, R4
        call   #hold

        incd   state
        jmp    eol

L_B:
        ;prepulse long high with gap
        ;sync
        bic    #OUT, &CCTL0
        bic.b  #BIT0, &P1OUT
        mov    #4, R4
        call   #hold
        
        ;long high
        bis    #OUT, &CCTL0       
        mov    #51, R4
        call   #hold
        
        ;short gap
        bic    #OUT, &CCTL0       
        mov    #4, R4
        call   #hold
        
        incd   state
        jmp    eol

L_C:
        ;prepulse long low with short pulse
        ;sync, lon low
        bic    #OUT, &CCTL0
        bic.b  #BIT0, &P1OUT
        mov   #43, R4
        call   #hold
        bis    #OUT, &CCTL0       
        
        ;short high
        bis    #OUT, &CCTL0
        mov    #6, R4
        call   #hold
        
        ;long low
        bic    #OUT, &CCTL0
        mov    #45, R4
        call   #hold
        
        ;short high
        bic    #OUT, &CCTL0
        mov    #6, R4
        call   #hold

        incd   state
        jmp    eol

L_D:
;        ;prepulse long low with short pulse then high
;        ;sync, long low
        bic    #OUT, &CCTL0
        bic.b  #BIT0, &P1OUT
        mov    #4, R4
        call   #hold
        
        incd   state
        clr    line
        bic    #CPUOFF|OSCOFF|SCG0|SCG1, 0(R1)   ; set CPU to active mode, the alarm could have set a taskbit
        jmp    eol

L_E:
        ;prepulse long high with gap
        ;sync
        bic    #OUT, &CCTL0
        bic.b  #BIT0, &P1OUT
        mov    #4, R4
        call   #hold
        
        ;long high
        bis    #OUT, &CCTL0
        mov    #48, R4
        call   #hold
        
        ;long low
        bic    #OUT, &CCTL0
        mov    #50, R4
        call   #hold

        incd   state
        clr    line
        bic    #CPUOFF|OSCOFF|SCG0|SCG1, 0(R1)   ; set CPU to active mode, the alarm could have set a taskbit
        jmp    eol
        
L_G:
        ;prepulse long high with gap
        ;sync
        bic    #OUT, &CCTL0
        bic.b  #BIT0, &P1OUT
        mov    #4, R4
        call   #hold
        
        ;long high
        bis    #OUT, &CCTL0       
        mov    #52, R4
        call   #hold
        
        ;short gap
        bic    #OUT, &CCTL0       
        mov    #4, R4
        call   #hold
        ;high
        bis    #OUT, &CCTL0 
        
                
L_F:
        ;prepulse long high with gap
        ;sync
        bic    #OUT, &CCTL0
        bic.b  #BIT0, &P1OUT
        mov    #4, R4
        call   #hold
        
        ;long high
        bis    #OUT, &CCTL0       
        mov    #52, R4
        call   #hold
        
        ;short gap
        bic    #OUT, &CCTL0       
        mov    #4, R4
        call   #hold
        
        ;long high
        bis    #OUT, &CCTL0       
        mov    #100, R4
        call   #hold
        incd   state
        jmp    eol 

BLANKLINES:
        ;start with sync pulse
        bic    #OUT, &CCTL0
        bic.b  #BIT0, &P1OUT
        
        mov    #7, R4
        call   #hold

        bis    #OUT, &CCTL0

        inc    line
      
        cmp    #23, line 
        jne    eol
        incd   state
        clr    line
        jmp    eol


LINES:
        ;start with sync pulse
        bic    #OUT, &CCTL0	;4
        bic.b  #BIT0, &P1OUT	;3
        
        push   R9		;2
        push   R11		;2
        push   R12		;2

        mov    #16, R5		;2 number of bits to shift out
        mov    R5, R9		;1 and for the second register

        mov    line, R4		;3
        rra    R4		;1   div 2 = ram address (-->8 times the same data for a pixel)
        bic    #BIT0|BIT1, R4	;2   mask the lower four bytes
        mov    videomem(R4), R12;6
        incd   R4		;1
        mov    videomem(R4), R11;6
        
        bis    #OUT, &CCTL0	;4 

        mov    #20, R4		;3
        call   #hold		;3
        ;line data        

ta0s1:  rlc     R11		;2
        rlc.b   &P1OUT		;2
        dec     R5		;1
        jnz     ta0s1		;2

        
ta0s2:  rlc     R12		;2
        rlc.b   &P1OUT		;2
        dec     R9		;1
        jnz     ta0s2		;2
        

        pop    R12		;2
        pop    R11		;2

        bic.b  #BIT0, &P1OUT

        pop    R9

        inc    line
        cmp    #192, line
        jne    eol
        incd   state       
        clr    line


;end of line
eol:    bic.b  #BIT0, &P1OUT
        bis    #OUT, &CCTL0
        
        ;audio output
        tst    play		;playing ?
        jnz    pl
        clr    &CCTL1
        reti			;no -> exit

pl:     dec    play
        dec    sde
        jnz    er
        mov    freq, sde
        xor    #OUT, &CCTL1
        
er:     reti

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; TimerA0 Interupt Occurance
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   COMMON INTVEC
   ORG   TIMERA0_VECTOR   ;TimerA0 CCR0
   DW    ta0Int
   END   
       
    






